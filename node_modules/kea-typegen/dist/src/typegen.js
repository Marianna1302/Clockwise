"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTypeGen = void 0;
const ts = require("typescript");
const path = require("path");
const visit_1 = require("./visit/visit");
const print_1 = require("./print/print");
const package_json_1 = require("../package.json");
function runTypeGen(appOptions) {
    let program;
    let resetProgram;
    const { log } = appOptions;
    log(`ü¶ú Kea-TypeGen v${package_json_1.version}`);
    if (appOptions.sourceFilePath) {
        log(`‚ùáÔ∏è Loading file: ${appOptions.sourceFilePath}`);
        resetProgram = () => {
            program = ts.createProgram([appOptions.sourceFilePath], {
                target: ts.ScriptTarget.ES5,
                module: ts.ModuleKind.CommonJS,
                noEmit: true,
            });
        };
        resetProgram();
    }
    else if (appOptions.tsConfigPath) {
        log(`ü•ö TypeScript Config: ${appOptions.tsConfigPath}`);
        const configFile = ts.readJsonConfigFile(appOptions.tsConfigPath, ts.sys.readFile);
        const rootFolder = path.dirname(appOptions.tsConfigPath);
        const compilerOptions = ts.parseJsonSourceFileConfigFileContent(configFile, ts.sys, rootFolder);
        if (appOptions.watch) {
            const createProgram = ts.createEmitAndSemanticDiagnosticsBuilderProgram;
            const host = ts.createWatchCompilerHost(appOptions.tsConfigPath, compilerOptions.options, Object.assign(Object.assign({}, ts.sys), { writeFile(path, data, writeByteOrderMark) {
                    return null;
                } }), createProgram, reportDiagnostic, reportWatchStatusChanged);
            console.info(`ü•ö TypeScript Compiler API v${ts.version}`);
            const formatHost = {
                getCanonicalFileName: (path) => path,
                getCurrentDirectory: ts.sys.getCurrentDirectory,
                getNewLine: () => ts.sys.newLine,
            };
            function reportDiagnostic(diagnostic) {
                if (appOptions.verbose) {
                    console.error('Error', diagnostic.code, ':', ts.flattenDiagnosticMessageText(diagnostic.messageText, formatHost.getNewLine()));
                }
            }
            function reportWatchStatusChanged(diagnostic) {
                const codes = {
                    6031: `üëÄ Starting TypeScript watch mode`,
                    6032: `üîÑ Reloading...`,
                };
                console.info(codes[diagnostic.code] || `ü•ö ${ts.formatDiagnostic(diagnostic, formatHost).trim()}`);
            }
            const origCreateProgram = host.createProgram;
            host.createProgram = (rootNames, options, host, oldProgram) => {
                return origCreateProgram(rootNames, options, host, oldProgram);
            };
            const origPostProgramCreate = host.afterProgramCreate;
            host.afterProgramCreate = (prog) => {
                program = prog.getProgram();
                origPostProgramCreate(prog);
                goThroughAllTheFiles(program, appOptions);
            };
            ts.createWatchProgram(host);
        }
        else {
            resetProgram = () => {
                const host = ts.createCompilerHost(compilerOptions.options);
                program = ts.createProgram(compilerOptions.fileNames, compilerOptions.options, host);
            };
            resetProgram();
        }
    }
    else {
        log(`‚õî No tsconfig.json found! No source file specified.`);
    }
    function goThroughAllTheFiles(program, appOptions) {
        const parsedLogics = (0, visit_1.visitProgram)(program, appOptions);
        if (appOptions.verbose) {
            log(`üóíÔ∏è ${parsedLogics.length} logic${parsedLogics.length === 1 ? '' : 's'} found!`);
        }
        const response = (0, print_1.printToFiles)(program, appOptions, parsedLogics);
        if (!appOptions.write && !appOptions.watch && (response.filesToWrite > 0 || response.filesToModify > 0)) {
            process.exit(1);
        }
        return response;
    }
    if (program && !appOptions.watch && !appOptions.sourceFilePath) {
        if (appOptions.write) {
            let round = 0;
            while ((round += 1)) {
                const { writtenFiles, filesToModify } = goThroughAllTheFiles(program, appOptions);
                if (writtenFiles === 0 && filesToModify === 0) {
                    log(`üëã Finished writing files! Exiting.`);
                    process.exit(0);
                }
                if (round > 50) {
                    log(`üîÅ We seem to be stuck in a loop (ran %{round} times)! Exiting!`);
                    process.exit(1);
                }
                resetProgram();
            }
        }
        else {
            goThroughAllTheFiles(program, appOptions);
        }
    }
}
exports.runTypeGen = runTypeGen;
//# sourceMappingURL=typegen.js.map